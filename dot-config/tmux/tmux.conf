unbind -a
# ------------------------------------------------------------------------------------------------------------------------------------------------------ Refernced
# configs
#   https://www.youtube.com/watch?v=_hnuEdrM-a0
#   https://github.com/tmux/tmux/wiki/Advanced-Use
#   https://github.com/tmux/tmux/wiki/Recipes
#   https://willhbr.net/2024/03/06/tmux-conf-with-commentary/
#
# color inside tmux
#   https://github.com/tmux/tmux/blob/e809c2ec359b0fd6151cf33929244b7a7d637119/colour.c#L366C8-L366C8
#
# formats:
#   https://github.com/tmux/tmux/wiki/Formats

# ------------------------------------------------------------------------------------------------------------------------------------------------------ 옵션 / 환경변수
set-environment -g TMUX_CONFIG_DIR "$TMUX_CONFIG_DIR"
set-environment -g TMUX_PLUGIN_DIR "$TMUX_PLUGIN_DIR"
set-environment -g TMUX_RESURRECT_DIR "$TMUX_RESURRECT_DIR"
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.local/bin/tmux/plugins"

# ---------------------------------------------------------------------------------------------------- Choose Tree format
# ref: https://github.com/tmux/tmux/issues/1530
set -g @choose_tree_format '
    #{?pane_format,#[fg=green] #{pane_current_command} #[fg=brightblack]#{pane_current_path},
    #{?window_format,#[fg=#4169e1]  #[fg=#c1cdc1]#{?#{window_active},#[bg=#181d5f],} #{=|7|...;p10:window_name} #{?window_flags,#[fg=brightblack#,bg=default] 󰇘 #[fg=#4169e1]#{?#{window_last_flag},󰽒, }#{?#{window_zoomed_flag}, , },},
    #{?session_grouped, (group #{session_group}: #{session_group_list}),}
    #{?session_attached,#[fg=violet] ,''}
    #{?#{==:#{@copied_client_session},#{session_name}}, #[fg=brightblack]󰇘 #[fg=brightred]󰋜 now,}
  }
}
'
# choose-tree에서는 client_session 변수가 안먹힌다. 그래서 임의로 만들어준다.(hook도 필요)
set -g -F @copied_client_session "#{client_session}"

# ---------------------------------------------------------------------------------------------------- Source Files
source-file "~/.config/tmux/sub_config/mode_indicator.tmux.conf"

# ---------------------------------------------------------------------------------------------------- Mode Indicator
set -g command-alias[18] switch_mode_root='switch-client -T root'
set -g command-alias[20] switch_mode_copy='copy-mode'
set -g command-alias[22] switch_mode_session='switch-client -T session-mode'
set -g command-alias[23] switch_mode_window='switch-client -T window-mode'
set -g command-alias[24] switch_mode_pane='switch-client -T pane-mode'
set -g command-alias[25] switch_mode_resize='switch-client -T pane-resize-mode'

set -g -F @root_mode_sign    "#[none,italics,bg="#008b8b"#,fg="#000000"]  tmux "
set -g -F @copy_mode_sign    "#[bg="#ffa500"#,fg="#000000"]          COPY            "
set -g -F @session_mode_sign "#[bg="#ff0000"#,fg="#000000"]          SESSION         "
set -g -F @window_mode_sign  "#[bg="#4169e1"#,fg="#000000"]          WINDOW          "
set -g -F @pane_mode_sign    "#[bg="#00ff00"#,fg="#000000"]          PANE            "
set -g -F @pane-resize_mode_sign  "#[bg="#ff00ff"#,fg="#000000"]          RESIZE          "
set -g -F @prefix_mode_sign    "#[bg="#ffffff"#,fg="#000000"]      #[fg="#f00000"]󰜎 #[fg="#4169e1"]󰜎 #[fg="#00ff00"]󰜎 #[fg="#ff00ff"]󰜎      #[none,italics,fg="#000000"] tmux "

set -g @current_mode_format '#{?#{==:#{pane_in_mode},1},#{E:@copy_mode_sign},
  #{?#{==:#{client_key_table},root},#{E:@root_mode_sign},
  #{?#{==:#{client_key_table},session-mode},#{E:@session_mode_sign},
  #{?#{==:#{client_key_table},window-mode},#{E:@window_mode_sign},
  #{?#{==:#{client_key_table},pane-mode},#{E:@pane_mode_sign},
  #{?#{==:#{client_key_table},pane-resize-mode},#{E:@pane-resize_mode_sign},#{E:@prefix_mode_sign}}
}}}}}'

set -g @current_mode_style '#{?#{==:#{pane_in_mode},1},bg=#000000#,fg=#ffa500,
  #{?#{==:#{client_key_table},root},bg=#000000#,fg=#008b8b,
  #{?#{==:#{client_key_table},session-mode},bg=#000000#,fg=#ff0000,
  #{?#{==:#{client_key_table},window-mode},bg=#000000#,fg=#4169e1,
  #{?#{==:#{client_key_table},pane-mode},bg=#000000#,fg=#00ff00,
  #{?#{==:#{client_key_table},pane-resize-mode},bg=#000000#,fg=#ff00ff,bg=#000000#,fg=#ffffff}
}}}}}'


# ------------------------------------------------------------------------------------------------------------------------------------------------------ HOOK
# choose-tree에서는 client_session 변수가 안먹힌다. 그래서 임의로 만들어준다.(사용자 변수도 필요)
set-hook -g client-session-changed 'set -g -F @copied_client_session "#{session_name}"'
set-hook -g client-attached 'refresh-client -S'

# ------------------------------------------------------------------------------------------------------------------------------------------------------ SET OPTION
set -g default-shell /bin/bash
set -g detach-on-destroy off # 세션 종료시 tmux 자동 종료 방지
set -s exit-empty off # 마지막 창이 닫혀도 세션 유지
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm' # Enable undercurl
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m' # Enable undercurl colors

# ---------------------------------------------------------------------------------------------------- True Color
# ref: https://askubuntu.com/questions/125526/vim-in-tmux-display-wrong-colors/1331926#1331926
# remove '[env] TERM = "xterm-256color"' config from alacritty configuraion
# set -g default-terminal "tmux-256color"
# set -sa terminal-overrides ",alacritty*:Tc"
# OR
# set-option -sa terminal-features ',alacritty:RGB'
# set-option -ga terminal-features ",alacritty:usstyle"
# set-option -ga terminal-overrides ',alacritty:Tc'
# set -g default-terminal "alacritty"

# ref: https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6
# set -g default-terminal "tmux-256color"
# set -ag terminal-overrides ",xterm-256color:RGB"
# ref: https://medium.com/@jogarcia/bring-on-the-true-color-on-alacritty-tmux-neovim-99134521731d
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",$TERM:Tc"


# ---------------------------------------------------------------------------------------------------- Etc
set -s escape-time 0 # Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -g mouse off # 마우스
set -s focus-events on # Enable focus events to detect when the terminal gains or loses focus.
set -g display-time 1000  # Set a slightly longer display time for status messages.
set -g history-limit 2000  # 스크롤백 버퍼 늘리기
setw -g automatic-rename off   # Automatically rename windows to reflect the currently active program.
setw -g aggressive-resize on
set -g base-index 1  # 창 번호 표시
set -g renumber-windows on  # Renumber windows after closing a window.
setw -g pane-base-index 1  # Ensure pane numbering starts from 1 in each window.

# ------------------------------------------------------------------------------------------------------------------------------------------------------ Paper and Color
set -g cursor-colour "#008b8b"
set -g cursor-style "blinking-block"
# ---------------------------------------------------------------------------------------------------- Windows
# set -g set-titles on   # Set the terminal title to reflect the current tmux session and window.
# set -g set-titles-string '#{pane_title} ❐ #{session_name} ❐ #{window_index}:#{window_name}'   # Set the terminal title string to show pane title, session name, and window details.
# ---------------------------------------------------------------------------------------------------- Panes
set -g window-active-style bg="#000000"   # 헷갈리는 이름이지만 pane의 상태를 말한다.
set -g window-style bg="#000000"          # 헷갈리는 이름이지만 pane의 상태를 말한다.
set -g pane-border-status top   # Enable pane border status at the top
set -g pane-border-format ''
# Left-aligned pane border format: Shows session and window info when status is off
set -ag pane-border-format '#{?#{pane_active},#[align=left]#{?#{==:#{status},off}, #[fg=red#,bold]󰋜 #{session_name} #[fg=#4169e1#,bold] #{window_index}/#{session_windows} #[fg=#87CEFA#]#{window_name} #[fg=#FFFF00#,bold]#{?#{window_zoomed_flag},(  Zoom) ,},},}'
# Right-aligned pane border format: Shows running command, path, and pane details
# pane_title이 자동으로 변수 host로 지정되어서 첫번째 조건문이 특이하다.
set -ag pane-border-format '#[align=right fg=green]  #{?#{==:#{pane_title},#{host}},#{pane_current_command},#{pane_title}} #[fg=brightblack]#{pane_current_path} #[fg=yellow][0#{pane_index}, pid:#{pane_pid}] '
# Append mode indicator and trailing space: Shows current mode when pane is active and status is off
set -ag pane-border-format '#{?#{==:#{status},off},#{?#{pane_active},#[italics]#{E:@current_mode_format},},}#[bg=#000000] '
set -g pane-border-style bg="#000000",fg="#8b8b83"
set -g pane-active-border-style '#{E:@current_mode_style}'

# TODO:: 왜 조건문을 사용할 수 없는거지?
# set -g pane-border-lines '#{?#{==:#{client_key_table},root},single,simple}'
# set -g pane-border-lines #{?#{==:1,2},single,simple}
set -g pane-border-lines single
# 󰽒   󰈈 󰛐 󰻿         ░
# ---------------------------------------------------------------------------------------------------- Modes
setw -g mode-style 'bg=#8b8b83'
set -g copy-mode-match-style bg=#ffa500,fg=black
set -g copy-mode-current-match-style bg=#0000ff,fg=lightyellow

# ------------------------------------------------------------------------------------------------------------------------------------------------------ Status Bar
# ---------------------------------------------------------------------------------------------------- GENERAL
set -g status on
set -g status-position top
set -g status-interval 1
set -g status-bg "#000000"
# set -g status-fg white
# ---------------------------------------------------------------------------------------------------- Left
set -g status-left-length 100
set -g status-left "#[fg=#4169e1]  #[fg=#c1cdc1] ⏽"
# ---------------------------------------------------------------------------------------------------- Right
set -g status-right-length 120
set -g status-right "#[fg=red,bold]󰋜 #{session_name}  #[fg=white]  #{host} "
set -ag status-right "#[italics]#{E:@current_mode_format}"
# ---------------------------------------------------------------------------------------------------- Windows
set -g window-status-format "#[fg=#4169e1]#{?#{window_last_flag},󰽒, } #[fg=#c1cdc1]#{window_index}: #{=|10|...;p13:window_name} "
# window_active (flag)는 highlight로 구분
set -ag window-status-format "#{?#{window_zoomed_flag}, , } #[fg=#c1cdc1] ⏽"
set -g window-status-separator "#[fg=#87CEFA,bg=#0000ff]"
set -g window-status-style bg=default,fg=lightyellow

set -g window-status-current-format "#[bg=#181d5f,fg=lightyellow]  #{window_index}: #{=|10|...;p13:window_name} "
set -ag window-status-current-format "#{?#{window_zoomed_flag}, , } #[bg=#000000,fg=#c1cdc1] ⏽"
# # window-status-current-style
# # window-status-last-style
# # window-status-activity-style


# ------------------------------------------------------------------------------------------------------------------------------------------------------ Command-alias
set -g command-alias[1] toggle_zoom='if -F "#{==:#{window_zoomed_flag},1}" \
  "resize-pane -Z; set -g status on ; set -g pane-border-status top; switch_mode_pane" \
  "resize-pane -Z; set -g status off ; switch_mode_root"'


# ------------------------------------------------------------------------------------------------------------------------------------------------------ KEY-BINDING
# ---------------------------------------------------------------------------------------------------- GENERAL
set -g prefix C-g
bind C-g send-prefix
bind C-d detach
bind d detach
bind \; command-prompt
bind R source-file ~/.config/tmux/tmux.conf \; display-message "source-file updated"
bind Space switch_mode_root \; set -g cursor-colour "#008b8b"

bind o \
   display-popup -w 30% -h 15% -S "fg=green" -T " [Cheat Sheet](https://github.com/chubin/cheat.sh)" -E "bash /home/sy/dotfiles/dot-config/bash.sub/scripts/tmux/cht.sh"

# toggle zoom pane
bind -n C-q toggle_zoom

# toggle status bar
bind C-h if -F '#{==:#{status},on}' \
  'set -g status off' \
  'set -g status on'

# toggle pane border status
bind C-s if -F '#{==:#{pane-border-status},top}' \
  'set -g pane-border-status off' \
  'set -g pane-border-status top'

# scratch session as popup
# bind Enter \
#   if-shell -F '#{==:#{session_name},scratch}' \
#   { detach-client } \
#   { display-popup -w 100% -h 100% -S "fg=red" -E "tmux new-session -A -s scratch" }
# scratch window as popup
bind Enter \
   display-popup -w 90% -h 90% -S "fg=red" -E "echo '  \# This scratch shell.' && bash"

# pane history with less
bind C-l capture-pane -S - -E - -e -b lesshist \; new-window -n "lesshist" 'tmux show-buffer -b lesshist| less -R +G'

# admin menu
bind m display-menu -S "fg=lightyellow,bg=red4" -b "none" -s "bg=red4,fg=lightyellow" -H "bg=yellow,fg=red4" -x C -y C -T "#[align=centre fg=lightyellow] Admin Menu " \
  "Save"   s  "run-shell -b \'bash $TMUX_PLUGIN_DIR/tmux-resurrect/scripts/save.sh\'" \
  "Detach"   d  "detach" \
  "Open Saved"   o  "new-window -n 'resurrect_dir' 'cd $TMUX_RESURRECT_DIR && lsd -lXFt && exec bash'" \
  "Break this Server                           #[fg=red4]Think twice!"   B  "confirm-before kill-server" \
  "                                            #[fg=red4]Think twice!                                             " ""  "" \
  "                                            #[fg=red4]Think twice!                                             " ""  "" \
  "Plugin Install"   I  "run-shell -b \'bash $TMUX_PLUGIN_DIR/tpm/bin/install_plugins\'" \
  "Plugin Update all"   U  "run-shell -b \'bash $TMUX_PLUGIN_DIR/tpm/bin/update_plugins all\'" \
  "Plugin Delete"   D  "run-shell -b \'bash $TMUX_PLUGIN_DIR/tpm/bin/clean_plugins\'" \
  "                                            #[fg=red4]Think twice!                                             " ""  "" \
  "                                            #[fg=red4]Think twice!                                             " ""  "" \
  "Clear Resurrects                            #[fg=red4]Think twice!"   C  "confirm-before 'run-shell -b \"bash $TMUX_CONFIG_DIR/utils/clear_tmux_resurrect.sh\"'"



# ---------------------------------------------------------------------------------------------------- ABOUT session: prefix + s
bind s switch_mode_session
bind -n C-up switch-client -p
bind -n C-down switch-client -n
bind -T session-mode Escape switch_mode_root
# ---------------------------------------------------------------------------------------------------- crud
bind -T session-mode n command-prompt -p " New session:" "new-session -s '%%'"
bind -T session-mode s choose-tree -sZ -F "#{E:@choose_tree_format}"
bind -T session-mode r command-prompt -p " Rename session:" "rename-session '%%'"
bind -T session-mode q confirm-before "kill-session"
# ---------------------------------------------------------------------------------------------------- nav
bind -T session-mode h switch-client -p \; switch_mode_session
bind -T session-mode l switch-client -n \; switch_mode_session
bind -T session-mode p switch-client -l \; switch_mode_session

# search sessions
bind C-e display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session |\
    xargs tmux switch-client -t"
# ---------------------------------------------------------------------------------------------------- menu
bind -T session-mode m display-menu -S "fg=red" -b "heavy" -H "bg=brightred,fg=black" -x R -y 9 -T "#[align=centre fg=red] Session Menu " \
  "                              "   Escape  "switch_mode_root" \
  "New"    n  "command-prompt -p 'New session: ' 'new-session -s "%%"'" \
  "Select" s  "choose-tree -sZ -F '##{E:@choose_tree_format}'" \
  "Rename" r  "command-prompt -p 'Rename session:' 'rename-session %%'" \
  "Quit"   q  "confirm-before kill-session"



# ---------------------------------------------------------------------------------------------------- ABOUT window: prefix + w
bind w switch_mode_window
bind -n C-] if-shell '[ "$(tmux list-windows | wc -l)" -gt 1 ]' 'next-window'
bind -n C-[ if-shell '[ "$(tmux list-windows | wc -l)" -gt 1 ]' 'previous-window'
bind -T window-mode Escape switch_mode_root
# ---------------------------------------------------------------------------------------------------- crud
bind -T window-mode n command-prompt -p "New window: " "new-window -n '%%'"
bind -T window-mode s run-shell 'tmux choose-tree -wZ -f"##{==:##{session_name},#{session_name}}" -F"##{E:@choose_tree_format}"'
bind -T window-mode r command-prompt -I "" "rename-window '%%'"
bind -T window-mode q confirm-before "kill-window"
# ---------------------------------------------------------------------------------------------------- nav
bind -T window-mode h previous-window \; switch_mode_window
bind -T window-mode l next-window \; switch_mode_window
bind -T window-mode p last-window \; switch_mode_window
bind -T window-mode H swap-window -t -1 \; previous-window \; switch_mode_window
bind -T window-mode L swap-window -t +1 \; next-window \; switch_mode_window
# ---------------------------------------------------------------------------------------------------- menu
bind -T window-mode m display-menu -S "fg=blue" -b "heavy" -H "bg=#4169e1,fg=black" -x R -y 9 -T "#[align=centre fg=blue] Window Menu " \
  "                              "   Escape  "switch_mode_root" \
  "New"    n  "command-prompt -p 'New window: ' 'new-window -n "%%"'" \
  "Select" s  "choose-tree -wZ -f '##{==:##{session_name},#{session_name}}' -F '##{E:@choose_tree_format}'" \
  "Rename" r  "command-prompt -p 'Rename window:' 'rename-window %%'" \
  "Quit"   q  "confirm-before kill-window"



# ---------------------------------------------------------------------------------------------------- ABOUT pane

# ---------------------------------------------------------------------------------------------------- crud
bind v split-window -h \; switch_mode_pane
bind x split-window -v \; switch_mode_pane
bind V split-window -h -c "#{pane_current_path}" \; switch_mode_pane
bind X split-window -v -c "#{pane_current_path}" \; switch_mode_pane
bind q kill-pane \; switch_mode_pane
# ---------------------------------------------------------------------------------------------------- nav & move
bind -n C-M-h select-pane -L
bind -n C-M-j select-pane -D
bind -n C-M-k select-pane -U
bind -n C-M-l select-pane -R
bind h select-pane -L \; switch_mode_pane
bind j select-pane -D \; switch_mode_pane
bind k select-pane -U \; switch_mode_pane
bind l select-pane -R \; switch_mode_pane
# bind 1 select-pane -t 1 \; switch_mode_pane
# bind 2 select-pane -t 2 \; switch_mode_pane
# bind 3 select-pane -t 3 \; switch_mode_pane
# bind 4 select-pane -t 4 \; switch_mode_pane
# bind 5 select-pane -t 5 \; switch_mode_pane
# bind 6 select-pane -t 6 \; switch_mode_pane
# bind 7 select-pane -t 7 \; switch_mode_pane
# bind 8 select-pane -t 8 \; switch_mode_pane
# bind 9 select-pane -t 9 \; switch_mode_pane
bind H swap-pane -U \; switch_mode_pane
bind L swap-pane -D \; switch_mode_pane
# ---------------------------------------------------------------------------------------------------- ABOUT pane: prefix + p
bind p switch_mode_pane
bind -T pane-mode Escape switch_mode_root
# ---------------------------------------------------------------------------------------------------- special
bind -T pane-mode i switch_mode_copy
bind -T pane-mode b break-pane \; command-prompt -I "" "rename-window '%%'"
bind -T pane-mode m command-prompt -p "move pane to:"  "move-pane -t '%%'" # tree 활용 필요
# ---------------------------------------------------------------------------------------------------- crud
bind -T pane-mode v split-window -h \; switch_mode_pane
bind -T pane-mode x split-window -v \; switch_mode_pane
bind -T pane-mode V split-window -h -c "#{pane_current_path}" \; switch_mode_pane
bind -T pane-mode X split-window -v -c "#{pane_current_path}" \; switch_mode_pane
bind -T pane-mode q kill-pane \; switch_mode_pane
# ---------------------------------------------------------------------------------------------------- nav & move
bind -T pane-mode h select-pane -L \; switch_mode_pane
bind -T pane-mode j select-pane -D \; switch_mode_pane
bind -T pane-mode k select-pane -U \; switch_mode_pane
bind -T pane-mode l select-pane -R \; switch_mode_pane
# bind -T pane-mode 1 select-pane -t 1 \; switch_mode_pane
# bind -T pane-mode 2 select-pane -t 2 \; switch_mode_pane
# bind -T pane-mode 3 select-pane -t 3 \; switch_mode_pane
# bind -T pane-mode 4 select-pane -t 4 \; switch_mode_pane
# bind -T pane-mode 5 select-pane -t 5 \; switch_mode_pane
# bind -T pane-mode 6 select-pane -t 6 \; switch_mode_pane
# bind -T pane-mode 7 select-pane -t 7 \; switch_mode_pane
# bind -T pane-mode 8 select-pane -t 8 \; switch_mode_pane
# bind -T pane-mode 9 select-pane -t 9 \; switch_mode_pane
bind -T pane-mode H swap-pane -U \; switch_mode_pane
bind -T pane-mode L swap-pane -D \; switch_mode_pane
# ---------------------------------------------------------------------------------------------------- resize: (on pane-mode) + r
bind 4 switch_mode_resize
bind -T pane-resize-mode Escape switch_mode_root
bind -T pane-resize-mode h resize-pane -L 4 \; switch_mode_resize
bind -T pane-resize-mode j resize-pane -D 4 \; switch_mode_resize
bind -T pane-resize-mode k resize-pane -U 4 \; switch_mode_resize
bind -T pane-resize-mode l resize-pane -R 4 \; switch_mode_resize
bind -T pane-resize-mode H resize-pane -L 10 \; switch_mode_resize
bind -T pane-resize-mode J resize-pane -D 10 \; switch_mode_resize
bind -T pane-resize-mode K resize-pane -U 10 \; switch_mode_resize
bind -T pane-resize-mode L resize-pane -R 10 \; switch_mode_resize


# ---------------------------------------------------------------------------------------------------- COPY-MODE
# bind i copy-mode \;
bind i switch_mode_copy \; set -g cursor-colour "#ffa500"
# bind -T copy-mode     Enter                  send-keys -X copy-pipe-and-cancel
# bind -T copy-mode     \#                     send-keys -FX search-backward "#{copy_cursor_word}"
bind -T copy-mode     Escape                 send-keys -X clear-selection
bind -T copy-mode     \$                     send-keys -X end-of-line
bind -T copy-mode     \%                     send-keys -X next-matching-bracket
bind -T copy-mode     \'                     send-keys -FX search-forward "#{copy_cursor_word}"
bind -T copy-mode     Q                      send-keys -X jump-reverse
bind -T copy-mode     /                      command-prompt -T search -p "(search down)" { send-keys -X search-forward "%%" }
bind -T copy-mode     0                      send-keys -X start-of-line
bind -T copy-mode     1                      command-prompt -N -I 1 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     2                      command-prompt -N -I 2 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     3                      command-prompt -N -I 3 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     4                      command-prompt -N -I 4 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     5                      command-prompt -N -I 5 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     6                      command-prompt -N -I 6 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     7                      command-prompt -N -I 7 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     8                      command-prompt -N -I 8 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     9                      command-prompt -N -I 9 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode     \;                     command-prompt -p "(goto line)" { send-keys -X goto-line "%%" }
bind -T copy-mode     :                      send-keys -X jump-again
bind -T copy-mode     ?                      command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }
bind -T copy-mode     B                      send-keys -X previous-space
bind -T copy-mode     E                      send-keys -X next-space-end
bind -T copy-mode     F                      command-prompt -1 -p "(jump backward)" { send-keys -X jump-backward "%%" }
bind -T copy-mode     G                      send-keys -X history-bottom
bind -T copy-mode     H                      send-keys -X top-line
bind -T copy-mode     L                      send-keys -X bottom-line
bind -T copy-mode     M                      send-keys -X middle-line
bind -T copy-mode     N                      send-keys -X search-reverse
bind -T copy-mode     T                      command-prompt -1 -p "(jump to backward)" { send-keys -X jump-to-backward "%%" }
bind -T copy-mode     V                      send-keys -X select-line
bind -T copy-mode     W                      send-keys -X next-space
bind -T copy-mode     X                      send-keys -X set-mark
bind -T copy-mode     Y                      send-keys -X copy-line-and-cancel
bind -T copy-mode     ^                      send-keys -X back-to-indentation
bind -T copy-mode     b                      send-keys -X previous-word
bind -T copy-mode     e                      send-keys -X next-word-end
bind -T copy-mode     f                      command-prompt -1 -p "(jump forward)" { send-keys -X jump-forward "%%" }
bind -T copy-mode     g                      send-keys -X history-top
bind -T copy-mode     h                      send-keys -X cursor-left
bind -T copy-mode     i                      send-keys -X cancel \; set -g cursor-colour "#008b8b"
bind -T copy-mode     Space                  send-keys -X cancel \; set -g cursor-colour "#008b8b"
bind -T copy-mode     j                      send-keys -X cursor-down
bind -T copy-mode     k                      send-keys -X cursor-up
bind -T copy-mode     l                      send-keys -X cursor-right
bind -T copy-mode     n                      send-keys -X search-again
bind -T copy-mode     o                      send-keys -X other-end
bind -T copy-mode     r                      send-keys -X refresh-from-pane
bind -T copy-mode     t                      command-prompt -1 -p "(jump to forward)" { send-keys -X jump-to-forward "%%" }
bind -T copy-mode     v                      send-keys -X begin-selection
bind -T copy-mode     w                      send-keys -X next-word
bind -T copy-mode     y                      send-keys -X copy-selection-and-cancel
bind -T copy-mode     z                      send-keys -X scroll-middle
bind -T copy-mode     \{                     send-keys -X previous-paragraph
bind -T copy-mode     \}                     send-keys -X next-paragraph
bind -T copy-mode     C-v                    send-keys -X rectangle-toggle
bind -T copy-mode     C-q                    send-keys -X cancel \; toggle_zoom
bind -T copy-mode     C-u                    send-keys -X halfpage-up
bind -T copy-mode     C-d                    send-keys -X halfpage-down
# bind -T copy-mode     C-e                    send-keys -X scroll-down \; cursor-up \; cursor-up
# bind -T copy-mode     C-y                    send-keys -X scroll-up \; cursor-down \; cursor-down

bind -T copy-mode-vi    Escape                 send-keys -X clear-selection
bind -T copy-mode-vi    \$                     send-keys -X end-of-line
bind -T copy-mode-vi    \%                     send-keys -X next-matching-bracket
bind -T copy-mode-vi    \'                     send-keys -FX search-forward "#{copy_cursor_word}"
bind -T copy-mode-vi    Q                      send-keys -X jump-reverse
bind -T copy-mode-vi    /                      command-prompt -T search -p "(search down)" { send-keys -X search-forward "%%" }
bind -T copy-mode-vi    0                      send-keys -X start-of-line
bind -T copy-mode-vi    1                      command-prompt -N -I 1 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    2                      command-prompt -N -I 2 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    3                      command-prompt -N -I 3 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    4                      command-prompt -N -I 4 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    5                      command-prompt -N -I 5 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    6                      command-prompt -N -I 6 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    7                      command-prompt -N -I 7 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    8                      command-prompt -N -I 8 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    9                      command-prompt -N -I 9 -p (repeat) { send-keys -N "%%" }
bind -T copy-mode-vi    \;                     command-prompt -p "(goto line)" { send-keys -X goto-line "%%" }
bind -T copy-mode-vi    :                      send-keys -X jump-again
bind -T copy-mode-vi    ?                      command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }
bind -T copy-mode-vi    B                      send-keys -X previous-space
bind -T copy-mode-vi    E                      send-keys -X next-space-end
bind -T copy-mode-vi    F                      command-prompt -1 -p "(jump backward)" { send-keys -X jump-backward "%%" }
bind -T copy-mode-vi    G                      send-keys -X history-bottom
bind -T copy-mode-vi    H                      send-keys -X top-line
bind -T copy-mode-vi    L                      send-keys -X bottom-line
bind -T copy-mode-vi    M                      send-keys -X middle-line
bind -T copy-mode-vi    N                      send-keys -X search-reverse
bind -T copy-mode-vi    T                      command-prompt -1 -p "(jump to backward)" { send-keys -X jump-to-backward "%%" }
bind -T copy-mode-vi    V                      send-keys -X select-line
bind -T copy-mode-vi    W                      send-keys -X next-space
bind -T copy-mode-vi    X                      send-keys -X set-mark
bind -T copy-mode-vi    Y                      send-keys -X copy-line-and-cancel
bind -T copy-mode-vi    ^                      send-keys -X back-to-indentation
bind -T copy-mode-vi    b                      send-keys -X previous-word
bind -T copy-mode-vi    e                      send-keys -X next-word-end
bind -T copy-mode-vi    f                      command-prompt -1 -p "(jump forward)" { send-keys -X jump-forward "%%" }
bind -T copy-mode-vi    g                      send-keys -X history-top
bind -T copy-mode-vi    h                      send-keys -X cursor-left
bind -T copy-mode-vi    i                      send-keys -X cancel \; set -g cursor-colour "#008b8b"
bind -T copy-mode-vi    Space                  send-keys -X cancel \; set -g cursor-colour "#008b8b"
bind -T copy-mode-vi    j                      send-keys -X cursor-down
bind -T copy-mode-vi    k                      send-keys -X cursor-up
bind -T copy-mode-vi    l                      send-keys -X cursor-right
bind -T copy-mode-vi    n                      send-keys -X search-again
bind -T copy-mode-vi    o                      send-keys -X other-end
bind -T copy-mode-vi    r                      send-keys -X refresh-from-pane
bind -T copy-mode-vi    t                      command-prompt -1 -p "(jump to forward)" { send-keys -X jump-to-forward "%%" }
bind -T copy-mode-vi    v                      send-keys -X begin-selection
bind -T copy-mode-vi    w                      send-keys -X next-word
bind -T copy-mode-vi    y                      send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi    z                      send-keys -X scroll-middle
bind -T copy-mode-vi    \{                     send-keys -X previous-paragraph
bind -T copy-mode-vi    \}                     send-keys -X next-paragraph
bind -T copy-mode-vi    C-v                    send-keys -X rectangle-toggle
bind -T copy-mode-vi    C-q                    send-keys -X cancel \; toggle_zoom
bind -T copy-mode-vi    C-u                    send-keys -X halfpage-up
bind -T copy-mode-vi    C-d                    send-keys -X halfpage-down
# bind -T copy-mode-vi    C-e                    send-keys -X scroll-down \; cursor-up \; cursor-up
# bind -T copy-mode-vi    C-y                    send-keys -X scroll-up \; cursor-down \; cursor-down

# ---------------------------------------------------------------------------------------------------- MODE SWAP

# ---------------------------------------------------------------------------------------------------- basic
bind 1 switch_mode_session
bind 2 switch_mode_window
bind 3 switch_mode_pane
bind 4 switch_mode_resize

# ---------------------------------------------------------------------------------------------------- mutual swap
bind -T session-mode 1 switch_mode_session
bind -T session-mode 2 switch_mode_window
bind -T session-mode 3 switch_mode_pane
bind -T session-mode 4 switch_mode_resize
bind -T session-mode i switch_mode_copy \; set -g cursor-colour "#ffa500"
bind -T session-mode Space switch_mode_root \; set -g cursor-colour "#008b8b"

bind -T window-mode 1 switch_mode_session
bind -T window-mode 2 switch_mode_window
bind -T window-mode 3 switch_mode_pane
bind -T window-mode 4 switch_mode_resize
bind -T window-mode i switch_mode_copy \; set -g cursor-colour "#ffa500"
bind -T window-mode Space switch_mode_root \; set -g cursor-colour "#008b8b"

bind -T pane-mode 1 switch_mode_session
bind -T pane-mode 2 switch_mode_window
bind -T pane-mode 3 switch_mode_pane
bind -T pane-mode 4 switch_mode_resize
bind -T pane-mode i switch_mode_copy \; set -g cursor-colour "#ffa500"
bind -T pane-mode Space switch_mode_root \; set -g cursor-colour "#008b8b"

bind -T pane-resize-mode 1 switch_mode_session
bind -T pane-resize-mode 2 switch_mode_window
bind -T pane-resize-mode 3 switch_mode_pane
bind -T pane-resize-mode 4 switch_mode_resize
bind -T pane-resize-mode i switch_mode_copy \; set -g cursor-colour "#ffa500"
bind -T pane-resize-mode Space switch_mode_root \; set -g cursor-colour "#008b8b"
bind -T pane-resize-mode C-g switch_mode_pane

bind -T switch_mode_copy M-1 switch_mode_session
bind -T switch_mode_copy M-2 switch_mode_window
bind -T switch_mode_copy M-3 switch_mode_pane
bind -T switch_mode_copy M-4 switch_mode_resize






# ------------------------------------------------------------------------------------------------------------------------------------------------------ PLUGIN
#https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tpm'

# 설치한 플러그인을 직접 실행하는 예시
# "Manage Session" m  "display-popup -w 90% -h 90% -y C -E 'PREVIEW_ENABLED=1 $TMUX_PLUGIN_DIR/tmux-fzf-session-switch/scripts/switch_session.sh'"

# ---------------------------------------------------------------------------------------------------- Key-Binding
# set -g @tpm-install "I" # Installs new plugins from GitHub or any other git repository, Refreshes TMUX environment
# set -g @tpm-update "u" # updates plugin(s)
# set -g @tpm-clean "U" # remove/uninstall plugins not on the plugin list

# ---------------------------------------------------------------------------------------------------- Plugin-List
# ---------------------------------------------------------------------- examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
# ---------------------------------------------------------------------- maybe later:
# set -g @plugin 'thepante/tmux-git-autofetch'
# https://github.com/jaclu/tmux-menus
# set -g @plugin 'gcla/tmux-wormhole' # file transfer from remote server
# ---------------------------------------------------------------------- installed:
set -g @plugin 'b0o/tmux-autoreload'
set -g @plugin 'tmux-plugins/tmux-resurrect' # environment save/restore(*env란 tmux session, window, pane, etc을 종합적으로 말함)
set -g @plugin 'tmux-plugins/tmux-continuum' # tmux-resurrect 자동화
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
# ---------------------------------------------------------------------------------------------------- Plugin-Configs
# ---- tmux-plugins/tmux-resurrect
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
set -g @resurrect-save 'C-w'
# set -g @resurrect-restore 'R'
set -g @resurrect-dir $TMUX_RESURRECT_DIR

# ---- tmux-plugins/tmux-continuum
set -g @continuum-save-interval '0' # minutes, 0 to turn off
# set -g @continuum-restore 'on' # auto restore
set -g @continuum-boot 'on'
# set -g @continuum-boot-options 'alacritty' # for macOS only

# ---- gcla/tmux-wormhole
# set -g @wormhole-key "d" # how to launch tmux-wormhole (default: w)
# set -g @wormhole-save-folder "~/Downloads/" # where to keep transferred files and directories (default: XDG download dir e.g. ~/Downloads/)
# set -g @wormhole-open-cmd "xdg-open" # run this command after a file is transferred (default: xdg-open or open)
# set -g @wormhole-no-default-open "true" # just transfer, don't run anything afterwards (default: false)
# set -g @wormhole-no-ask-to-open # after a file is transferred, ask the user interactively if the file should be opened (default: false)
# set -g @wormhole-can-overwrite "false" # allow tmux-wormhole to overwite a file or directory of the same name locally (default: false)

# ---------------------------------------------------------------------------------------------------- install TMUX plugin manager if not exist
if "test ! -d $TMUX_PLUGIN_DIR/tpm" \
   "run 'mkdir -p $TMUX_RESURRECT_DIR && git clone https://github.com/tmux-plugins/tpm $TMUX_PLUGIN_DIR/tpm && $TMUX_PLUGIN_DIR/tpm/bin/install_plugins'"

# ---------------------------------------------------------------------------------------------------- Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '$HOME/.local/bin/tmux/plugins/tpm/tpm'
